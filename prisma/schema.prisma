generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model integrated with Clerk
model User {
  id        String   @id @default(cuid())
  clerkId   String?  @unique
  email     String   @unique
  username  String?
  role      String   @default("user")
  password  String?  // optional, only if you want NextAuth credentials
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Home {
  id        String @id @default(cuid())
  title     String
  deskripsi String
  image     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("homes")
}

model About {
  id           String         @id @default(cuid())
  title        String
  deskripsi    String
  visi         String
  misi         String
  layanan      String
  brandPartner BrandPartner[]
  contact      Contact[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("abouts")
}

model BrandPartner {
  id      String @id @default(cuid())
  nama    String
  image   String?
  aboutId String?
  about   About?     @relation(fields: [aboutId], references: [id])
  
  categories Category[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brand_partners")
}

model Contact {
  id              String @id @default(cuid())
  email           String
  nomor_wa        String
  alamat          String
  maps_link       String?
  jam_operasional String
  instagram       String?
  tiktok          String?
  facebook        String?
  youtube         String?
  aboutId         String?
  about           About?  @relation(fields: [aboutId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model Marketplace {
  id         String @id @default(cuid())
  tiktokshop String?
  tokopedia  String?
  shopee     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("marketplaces")
}

model Banner {
  id        String  @id @default(cuid())
  title     String
  deskripsi String
  image     String?
  urutan    Int     @default(0)
  isActive  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banners")
}

model Category {
  id             String         @id @default(cuid())
  nama           String
  brandPartners  BrandPartner[]
  products       Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Product {
  id          String          @id @default(cuid())
  nama        String
  deskripsi   String
  isFavorite  Boolean         @default(false)
  categories  Category[]
  options     ProductOption[]
  images      ProductImage[] 
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  @@map("products")
}

model ProductOption {
  id         String        @id @default(cuid())
  productId  String
  product    Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  warna      String
  variant    String
  hargaAsli  Float
  hargaJual  Float
  stock      Int           @default(0)
  specs      ProductSpec[]
  images     OptionImage[] 
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  @@map("product_options")
}

model ProductImage {
  id         String  @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl   String
  urutan     Int      @default(0)
  createdAt  DateTime @default(now())
}

model OptionImage {
  id             String  @id @default(cuid())
  productOptionId String
  productOption   ProductOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  imageUrl       String
  urutan         Int      @default(0)
  createdAt      DateTime @default(now())
}

model ProductSpec {
  id              String        @id @default(cuid())
  productOptionId String
  productOption   ProductOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  deskripsi_spec  String
  image           String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_specs")
}

model SettingSite {
  id            String @id @default(cuid())
  logo          String?
  nama_company  String
  metadataTitle String
  favicon       String?
  metakeyword   String?
  metadesc      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("setting_sites")
}